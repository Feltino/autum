!function(e,n,t,o,i){"function"==typeof define&&define.amd?define(function(){return e.fullpage=o(n,t),e.fullpage}):"object"==typeof exports?module.exports=o(n,t):n.fullpage=o(n,t)}(this,window,document,function(e,n,t){"use strict";var o,i,a,r,l,c,s,f,u,v="fullpage-wrapper",d="."+v,h="fp-notransition",p="fp-destroyed",g="fp-viewing",m="active",S="."+m,y="fp-section",b="."+y,T=b+S,L="fp-nav",w="fp-slide",x="."+w,E=x+S,M="fp-slides",k="."+M,N="fp-slidesContainer",A="."+N,B="fp-slidesNav",C="."+B,P=C+" a",H="fp-controlArrow",z="."+H,R="fp-prev",I=H+" "+R,D=z+"."+R,O=H+" fp-next",Y=z+".fp-next",X=!1,j=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),W="ontouchstart"in e||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,F=ae(),U=!1,$=!0,q=[];function K(){for(var t=Z(z),i=0;i<t.length;i++)ce(t[i],"click onclick touchstart",Fe);he(o.autoScrolling,"internal");var a,l=Q(T),c=Q(E,l),f=_(Q(T));c&&(0!==f||0===f&&0!==_(c))&&fn(c),o.navigation&&(J(r,"margin-top","-"+r.offsetHeight/2+"px"),oe(Q("a",Z("li",r)[_(Q(T))]),m)),a=Q(T),le(o.afterLoad)&&o.afterLoad.call(a,a.getAttribute("data-anchor"),_(a)+1),le(o.afterRender)&&o.afterRender.call(s);var u=e.location.hash.replace("#","").split("/")[0];if(u.length){var v=Q('[data-anchor="'+u+'"]');if(!o.animateAnchor&&v.length){if(o.autoScrolling)un(v.offsetTop);else{un(0),ln(u);var d=Xe(v.offsetTop);se(d.element,d.options,0)}Je(u,null),le(o.afterLoad)&&o.afterLoad.call(v,u,_(v)+1),te(l,m),oe(v,m)}}ln(),cn(n,We,"DOMContentLoaded","DOMContentLoaded","DOMContentLoaded")}function V(e){return n.getElementsByTagName(e)[0]}function G(e,n){var t;for(t in n)n.hasOwnProperty(t)&&null!==t&&(e.style[t]=n[t]);return e}function J(e,n,t){e.style[n]=t}function Q(e,t){return(t=t||n).querySelector(e)}function Z(e,t){return(t=t||n).querySelectorAll(e)}function _(e){for(var n=0;e=e.previousSibling;)3==e.nodeType&&/^\s*$/.test(e.data)||n++;return n}function ee(e,n){return void 0!==n?e.style.display=n?"block":"none":"block"==e.style.display?e.style.display="none":e.style.display="block",e}function ne(e,n){return!!e.className.match(new RegExp("(\\s|^)"+n+"(\\s|$)"))}function te(e,n){if(e&&ne(e,n)){var t=new RegExp("(\\s|^)"+n+"(\\s|$)");e.className=e.className.replace(t,"")}}function oe(e,n){e&&!ne(e,n)&&(e.className+=" "+n)}function ie(e,n){return e&&(n(e)?e:ie(e.parentNode,n))}function ae(){return"innerHeight"in e?e.innerHeight:n.documentElement.offsetHeight}function re(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function le(e){return e&&"[object Function]"==={}.toString.call(e)}function ce(e,t,o){for(var i=t.split(" "),a=0,r=i.length;a<r;a++)n.addEventListener?e.addEventListener(i[a],o,!1):e.attachEvent(i[a],o,!1)}function se(n,t,i,a){var r,c=(r=n).self!=e&&ne(r,M)?r.scrollLeft:!o.autoScrolling||o.scrollBar?fe():r.offsetTop,s=t-c,f=0;l=!0;var u=function(){var e;l?(f+=20,e=Math.easeInOutCubic(f,c,s,i),de(n,e),f<i?setTimeout(u,20):void 0!==a&&a()):f<i&&a()};u()}function fe(){var t=n.documentElement;return(e.pageYOffset||t.scrollTop)-(t.clientTop||0)}function ue(e){for(var n=e.nextSibling;n&&1!=n.nodeType;)n=n.nextSibling;return n}function ve(e){for(var n=e.previousSibling;n&&1!=n.nodeType;)n=n.previousSibling;return n}function de(n,t){!o.autoScrolling||o.scrollBar||n.self!=e&&ne(n,M)?n.self!=e&&ne(n,M)?n.scrollLeft=t:n.scrollTo(0,t):n.style.top=t+"px"}function he(e,t){dn("autoScrolling",e,t);var i=Q(T);if(o.autoScrolling&&!o.scrollBar)G(n.body,{overflow:"hidden",height:"100%"}),G(V("html"),{overflow:"hidden",height:"100%"}),pe(o.recordHistory,"internal"),G(s,{"-ms-touch-action":"none","touch-action":"none"}),i&&un(i.offsetTop);else{G(n.body,{overflow:"visible",height:"100%"}),G(V("html"),{overflow:"visible",height:"100%"}),pe(!1,"internal"),G(s,{"-ms-touch-action":"","touch-action":""}),un(0);var a=Xe(i.offsetTop);a.element.scrollTo(0,a.options)}}function pe(e,n){dn("recordHistory",e,n)}function ge(e,n){dn("scrollingSpeed",e,n)}function me(){var e=ve(Q(T));e&&Ye(e,null,!0)}function Se(){var e=ue(Q(T));e&&Ye(e,null,!1)}function ye(e,n){var t=_e(e);void 0!==n?en(e,n):t&&Ye(t)}function be(){Oe("next")}function Te(){Oe("prev")}function Le(e){if(!ne(s,p)){U=!0,F=ae();for(var n=Z(b),t=0;t<n.length;++t){var i=n[t],a=Q(k,i),r=Z(x,i);a&&r.length>1&&$e(a,Q(E,a))}var l=Q(T);_(l)&&un(l.offsetTop),U=!1,le(o.afterResize)&&e&&o.afterResize.call(s),le(o.afterReBuild)&&!e&&o.afterReBuild.call(s)}}function we(e){var t=n.createElement("div");t.className=I;var i=n.createElement("div");i.className=O;var a=Q(k,e);o.controlArrowColor,a.parentNode.appendChild(t),a.parentNode.appendChild(i),o.loopHorizontal||(Q(D,e).style.display="none")}Math.easeInOutCubic=function(e,n,t,o){return(e/=o/2)<1?t/2*e*e*e+n:t/2*((e-=2)*e*e+2)+n};var xe=!1;function Ee(){var e;if(!o.autoScrolling||o.scrollBar){for(var n=fe(),t=0,a=Math.abs(n-Z(b)[0].offsetTop),r=Z(b),l=0;l<r.length;++l){var c=r[l],s=Math.abs(n-c.offsetTop);s<a&&(t=l,a=s)}e=Z(b)[t]}if(!o.autoScrolling||o.scrollBar){if(!ne(e,m)){xe=!0;var v=Q(T),d=_(v)+1,h=Qe(e),p=e.getAttribute("data-anchor"),g=_(e)+1,S=Q(E,e);if(S)var y=S.getAttribute("data-anchor"),L=_(S);$&&(te(v,m),oe(e,m),le(o.onLeave)&&o.onLeave.call(v,d,g,h),le(o.afterLoad)&&o.afterLoad.call(e,p,g),Je(p,0),o.anchors.length&&(i=p,on(L,y,p,g))),clearTimeout(f),f=setTimeout(function(){xe=!1},100)}o.fitToSection&&(clearTimeout(u),u=setTimeout(function(){($&&!o.autoScrolling||o.scrollBar)&&(_(Q(T))==_(e)&&(U=!0),Ye(e),U=!1)},o.fitToSectionDelay))}}function Me(e){"down"==e?Se():me()}var ke=0,Ne=0,Ae=0,Be=0;function Ce(t){var i=e.event||t||t.originalEvent;if(Pe(i)){o.autoScrolling&&re(t);var a=Q(T),r=Z(k,a);if($&&!X){var l=sn(i);Ae=l.y,Be=l.x,r&&Math.abs(Ne-Be)>Math.abs(ke-Ae)?Math.abs(Ne-Be)>("innerWidth"in e?e.innerWidth:n.documentElement.offsetWidth)/100*o.touchSensitivity&&(Ne>Be?be():Te()):o.autoScrolling&&Math.abs(ke-Ae)>ae()/100*o.touchSensitivity&&(ke>Ae?Me("down"):Ae>ke&&Me("up"))}}}function Pe(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function He(n){var t=e.event||n||n.originalEvent;if(o.fitToSection&&(l=!1),Pe(t)){var i=sn(t);ke=i.y,Ne=i.x}}function ze(e,n){for(var t=0,o=e.slice(Math.max(e.length-n,1)),i=0;i<o.length;i++)t+=o[i];return Math.ceil(t/n)}var Re,Ie=(new Date).getTime();function De(n){var t=(new Date).getTime();if(o.autoScrolling){var i=(n=e.event||n||n.originalEvent).wheelDelta||-n.deltaY||-n.detail,a=Math.max(-1,Math.min(1,i));q.length>149&&q.shift(),q.push(Math.abs(i)),o.scrollBar&&re(n);var r=t-Ie;return Ie=t,r>200&&(q=[]),$&&ze(q,10)>=ze(q,70)&&Me(a<0?"down":"up"),!1}o.fitToSection&&(l=!1)}function Oe(e){var n=Q(T),t=Q(k,n);if(t&&!X){var i,a=Q(E,t),r=null;if(!(r="prev"===e?ve(a):ue(a))){if(!o.loopHorizontal)return;var l=function(e,n){for(var t=[];e;e=e.nextSibling)1==e.nodeType&&e!=n&&t.push(e);return t}((i=a).parentNode.firstChild,i);r="prev"===e?l[l.length-1]:l[0]}X=!0,$e(t,r)}}function Ye(e,n,t){if(null!==e){var a={element:e,callback:n,isMovementUp:t,dtop:e.offsetTop,yMovement:Qe(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:_(e),activeSlide:Q(E,e),activeSection:Q(T),leavingSection:_(Q(T))+1,localIsResizing:U};if(!(_(a.activeSection)==a.sectionIndex&&!U||o.scrollBar&&fe()===a.dtop)){if(a.activeSlide)var r=a.activeSlide.getAttribute("data-anchor"),l=_(a.activeSlide);for(var c=Z(b),s=0;s<c.length;s++)te(c[s],m);oe(e,m),$=!1,on(l,r,a.anchorLink,a.sectionIndex),le(o.onLeave)&&!a.localIsResizing&&o.onLeave.call(a.activeSection,a.leavingSection,a.sectionIndex+1,a.yMovement),function(e){if(o.css3&&o.autoScrolling&&!o.scrollBar){Ze("translate3d(0px, -"+e.dtop+"px, 0px)",!0),o.scrollingSpeed?setTimeout(function(){je(e)},o.scrollingSpeed):je(e)}else{var n=Xe(e.dtop);se(n.element,n.options,o.scrollingSpeed,function(){je(e)})}}(a),i=a.anchorLink,Je(a.anchorLink,a.sectionIndex)}}}function Xe(n){var t={};return o.autoScrolling&&!o.scrollBar?(t.options=-n,t.element=Q("."+v)):(t.options=n,t.element=e),t}function je(e){le(o.afterLoad)&&!e.localIsResizing&&o.afterLoad.call(e.element,e.anchorLink,e.sectionIndex+1),$=!0,le(e.callback)&&e.callback.call(this)}function We(){var n=e.location.hash.replace("#","").split("/"),t=n[0],o=n[1];t&&en(t,o)}function Fe(n){var t=this;t.self==e&&(t=n.target||n.srcElement),ne(t,R)?Te():be()}function Ue(){if(!xe){var n=e.location.hash.replace("#","").split("/"),t=n[0],o=n[1];t.length&&(t&&t!==i&&void 0!==i||void 0===i&&void 0===o&&!X||!X&&a!=o)&&en(t,o)}}function $e(e,n){var t=_(n),i=ie(e,function(e){return ne(e,y)}),a=_(i),r=i.getAttribute("data-anchor"),l=Q(C,i),c=rn(n),s=U;if(o.onSlideLeave){var f=Q(E,i),u=_(f),v=u==t?"none":u>t?"left":"right";s||"none"===v||le(o.onSlideLeave)&&o.onSlideLeave.call(f,r,a+1,u,v,t)}for(var d=Z(x,i),h=0;h<d.length;h++)te(d[h],m);oe(n,m),!o.loopHorizontal&&o.controlArrows&&(ee(Q(D,i),0!==t),ee(Q(Y,i),!n.is(":last-child"))),ne(i,m)&&on(t,c,r,a);var p=function(){s||le(o.afterSlideLoad)&&o.afterSlideLoad.call(n,r,a+1,c,t),X=!1};if(o.css3){var g="translate3d(-"+Math.round(n.offsetLeft)+"px, 0px, 0px)",b=Q(A,e);Ge(b,o.scrollingSpeed),vn(b,g),setTimeout(function(){p()},o.scrollingSpeed,o.easing)}else se(e,Math.round(n.offsetLeft),o.scrollingSpeed,function(){p()});o.slidesNavigation&&(te(Q(S,l),m),oe(Q("a",Z("li",l)[t]),m))}n.addEventListener?e.addEventListener("hashchange",Ue,!1):e.attachEvent("onhashchange",Ue),n.onkeydown=function(t){clearTimeout(Re);var i=n.activeElement.tagName;if("SELECT"!==i&&"INPUT"!==i&&o.keyboardScrolling&&o.autoScrolling){for(var a=(t=e.event||t||t.originalEvent).charCode||t.keyCode,r=[40,38,32,33,34],l=0;l<r.length;l++)r[l]==a&&re(t);var c=t.shiftKey;Re=setTimeout(function(){!function(e,n){switch(a){case 38:case 33:me();break;case 32:if(e){me();break}case 40:case 34:Se();break;case 36:ye(1);break;case 35:ye(Z(b).length);break;case 37:Te();break;case 39:be()}}(c)},150)}},null!==Q(P)&&ce(Q(P),"click onclick touchstart",function(e){re(e);var n=ie(this,function(e){return ne(e1,y)}),t=Q(k,n),o=_(ie(this,function(e){return"li"===e.tagName}));$e(t,Z(x,t)[o])});var qe,Ke=F;function Ve(){if(j){if("text"!==n.activeElement.getAttribute("type")){var e=ae();Math.abs(e-Ke)>20*Math.max(Ke,e)/100&&(Le(!0),Ke=e)}}else clearTimeout(qe),qe=setTimeout(function(){Le(!0)},350)}function Ge(e){var n="all "+o.scrollingSpeed+"ms "+o.easingcss3;return te(e,h),G(e,{"-webkit-transition":n,transition:n}),e}function Je(e,n){var t,i;!function(e){if(o.menu){var n=Q(o.menu);n&&(te(Q(S,n),m),oe(Q('[data-menuanchor="'+e+'"]',n),m))}}(e),t=e,i=n,o.navigation&&(te(Q(S,r),m),oe(t?Q('a[href="#'+t+'"]',r):Q("a",Z("li",r)[i]),m))}function Qe(e){var n=_(Q(T)),t=_(e);return n==t?"none":n>t?"up":"down"}function Ze(e,n){n?Ge(s):oe(s,h),vn(s,e),setTimeout(function(){te(s,h)},10)}function _e(e){var n=Q(b+'[data-anchor="'+e+'"]');return n||(n=Z(b)[e-1]),n}function en(e,n){var t=_e(decodeURI(e));void 0===n&&(n=0),e===i||ne(t,m)?nn(t,n):Ye(t,function(){nn(t,n)})}function nn(e,n){if(void 0!==n){var t=Q(k,e),o=(i=n,a=Q(k,e),r=Q(x+'[data-anchor="'+i+'"]',a),a&&!r&&(r=Z(x,a)[i]),r);o&&$e(t,o)}var i,a,r}function tn(e,t){var i=n.createElement("div");i.className=B;var a=n.createElement("ul");i.appendChild(a),e.appendChild(i);var r=Q(C,e),l=Q("ul",r);oe(r,o.slidesNavPosition);for(var c="",s=0;s<t;s++)c+='<li><a href="#"><span></span></a></li>';l.innerHTML=l.innerHTML+c,J(r,"margin-left","-"+r.offsetWidth/2+"px"),oe(Q("a",Z("li",r)[0]),m)}function on(e,n,t,i){var r="";o.anchors.length&&(e?(void 0!==t&&(r=t),void 0===n&&(n=e),a=n,an(r+"/"+n)):void 0!==e?(a=n,an(t)):an(t)),ln()}function an(n){if(o.recordHistory)location.hash=n;else if(j||W)history.replaceState(t,t,"#"+n);else{var i=e.location.href.split("#")[0];e.location.replace(i+"#"+n)}}function rn(e){var n=e.getAttribute("data-anchor"),t=_(e);return n||(n=t),n}function ln(e){var t=Q(T),i=Q(E,t),a=t.getAttribute("data-anchor"),r=_(t);e=String(r),o.anchors.length&&(e=a),i&&(e=e+"-"+rn(i)),e=e.replace("/","-").replace("#","");var l=new RegExp("\\b\\s?"+g+"-[^\\s]+\\b","g");n.body.className=n.body.className.replace(l,""),oe(n.body,g+"-"+e)}function cn(e,n,t,o,i){e.addEventListener?(e.addEventListener(t,n,!1),void 0!==i&&e.addEventListener(i,n,!1)):e.attachEvent(o,n)}function sn(e){var n=[];return n.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,n.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,W&&Pe(e)&&(n.y=e.touches[0].pageY,n.x=e.touches[0].pageX),n}function fn(e,n){ge(0,"internal"),void 0!==n&&(U=!0),$e(ie(e,function(e){return ne(e,M)}),e),void 0!==n&&(U=!1),ge(c.scrollingSpeed,"internal")}function un(e){if(o.scrollBar){var n=Xe(e);de(n.element,n.options)}else o.css3?Ze("translate3d(0px, -"+e+"px, 0px)",!1):J(s,"top",-e+"px")}function vn(e,n){G(e,{"-webkit-transform":n,"-moz-transform":n,"-ms-transform":n,transform:n})}function dn(e,n,t){o[e]=n,"internal"!==t&&(c[e]=n)}function hn(e,n){console&&console[e]&&console[e]("fullPage: "+n)}return{initialize:function(i,a){o=function(e,n){for(var t in"object"!=typeof n&&(n={}),n)e.hasOwnProperty(t)&&(e[t]=n[t]);return e}({menu:!1,anchors:[],navigation:!1,navigationPosition:"right",navigationColor:"#000",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easingcss3:"ease",loopHorizontal:!0,touchSensitivity:5,keyboardScrolling:!0,recordHistory:!0,controlArrows:!0,sectionSelector:".section",slideSelector:".slide",afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null},a),c=function(e){if(null===e||"object"!=typeof e)return e;var n=e.constructor();for(var t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}(o),s=Q(i),function(i){te(s,p),function(){for(var e=0;e<o.anchors.length;e++){var t=o.anchors[e];((i="#"+t,n.getElementById(i))||Z('[name="'+t+'"]').length)&&hn("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).")}var i}(),o.css3&&(o.css3=function(){var o,i=n.createElement("p"),a={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var r in n.body.insertBefore(i,null),a)i.style[r]!==t&&(i.style[r]="translate3d(1px,1px,1px)",o=e.getComputedStyle(i).getPropertyValue(a[r]));return n.body.removeChild(i),o!==t&&o.length>0&&"none"!==o}()),null!==s?(G(s,{height:"100%",position:"relative"}),oe(s,v),oe(Q("html"),"fp-enabled")):hn("error","Error! Fullpage.js needs to be initialized with a selector. For example: fullpage('#fullpage');"),cn(Q(d),De,"mousewheel","onmousewheel","wheel"),function(){if(j||W){var t=Q(d);if(n.addEventListener){var o=e.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"};t.removeEventListener("touchstart",He),t.removeEventListener(o.down,He),t.removeEventListener("touchmove",Ce),t.removeEventListener(o.move,Ce),ce(t,"touchstart "+o.down,He),ce(t,"touchmove "+o.move,Ce)}}}(),cn(e,Ve,"resize","onresize"),cn(e,Ee,"scroll","onscroll","onscroll");var a=Z(o.sectionSelector);for(f=0;f<a.length;++f)oe(a[f],y);var l=Z(o.slideSelector);for(f=0;f<l.length;++f)oe(l[f],w);o.navigation&&function(){var i=n.createElement("div");i.setAttribute("id",L);var a=n.createElement("ul");i.appendChild(a),n.body.appendChild(i),J(r=Q("#fp-nav"),"color",o.navigationColor),oe(r,o.navigationPosition),o.showActiveTooltip&&oe(r,"fp-show-active");for(var l="",c=0;c<Z(b).length;c++){var s="";o.anchors.length&&(s=o.anchors[c]),l=l+'<li><a href="#'+s+'"><span></span></a>';var f=o.navigationTooltips[c];typeof f!==t&&""!==f&&(l+='<div class="fp-tooltip '+o.navigationPosition+'">'+f+"</div>"),l+="</li>"}var u=Q("ul",r);u.innerHTML=u.innerHTML+l;for(var v=Z(P),d=0;d<v.length;d++)ce(v[d],"click onclick touchstart",function(n){re(n=e.event||n||n.originalEvent);var t=_(this.parentNode);Ye(Z(b)[t],null,!1)})}();for(var c=Z(b),f=0;f<c.length;f++){var u=f,h=c[f],g=Z(x,h),S=g.length;if(u||null!==Q(T)||oe(h,m),void 0!==o.anchors[u]&&(h.setAttribute("data-anchor",o.anchors[u]),ne(h,m)&&Je(o.anchors[u],u)),S>0){var k=100*S,B=100/S,C=h.innerHTML,H='<div class="'+M+'"><div class="'+N+'">'+C+"</div></div>";h.innerHTML=H,g=Z(x,h),J(Q(A,h),"width",k+"%"),o.controlArrows&&S>1&&we(h),o.slidesNavigation&&tn(h,S);for(var z=0;z<g.length;z++){J(g[z],"width",B+"%")}var R=Q(E,h);null!==typeof R?oe(g[0],m):fn(R)}}i()}(K)},moveSectionUp:me,moveSectionDown:Se,moveTo:ye,silentMoveTo:function(e,n){ge(0,"internal"),ye(e,n),ge(c.scrollingSpeed,"internal")},moveSlideRight:be,moveSlideLeft:Te,setAutoScrolling:he,setFitToSection:function(e,n){dn("fitToSection",e,n)},setKeyboardScrolling:function(e){o.keyboardScrolling=e},setRecordHistory:pe,setScrollingSpeed:ge}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
